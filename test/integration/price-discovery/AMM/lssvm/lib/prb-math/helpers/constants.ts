import { BigNumber } from "@ethersproject/bignumber";
import fp from "evm-fp";

import { bn } from "./numbers";

export const E: string = "2.718281828459045235";
export const EPSILON: BigNumber = fp("1e-6");
export const EPSILON_MAGNITUDE: BigNumber = bn("1e6");
export const HALF_SCALE: string = "0.5";
export const MAX_SD59x18: string = "57896044618658097711785492504343953926634992332820282019728.792003956564819967";
export const MAX_UD60x18: string = "115792089237316195423570985008687907853269984665640564039457.584007913129639935";
export const MAX_WHOLE_SD59x18: string = "57896044618658097711785492504343953926634992332820282019728";
export const MAX_WHOLE_UD60x18: string = "115792089237316195423570985008687907853269984665640564039457";
export const MIN_SD59x18: string = "-57896044618658097711785492504343953926634992332820282019728.792003956564819968";
export const MIN_WHOLE_SD59x18: string = "-57896044618658097711785492504343953926634992332820282019728";
export const PI: string = "3.141592653589793238";
export const SCALE: string = "1";
export const SQRT_MAX_SD59x18: string = "240615969168004511545033772477.625056927114980741";
export const SQRT_MAX_UD60x18: string = "340282366920938463463374607431.768211455999999999";
export const SQRT_MAX_SD59x18_DIV_BY_SCALE: string = "240615969168004511545.033772477625056927"; // biggest number whose square fits within int256
export const SQRT_MAX_UD60x18_DIV_BY_SCALE: string = "340282366920938463463.374607431768211455"; // biggest number whose square fits within uint256
